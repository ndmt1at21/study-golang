// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	models "unittest/models"

	mock "github.com/stretchr/testify/mock"
)

// IUserQueries is an autogenerated mock type for the IUserQueries type
type IUserQueries struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *IUserQueries) CreateUser(user models.CreateUserData) (*models.User, error) {
	ret := _m.Called(user)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(models.CreateUserData) *models.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.CreateUserData) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: id
func (_m *IUserQueries) GetUser(id int64) (*models.User, error) {
	ret := _m.Called(id)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(int64) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *IUserQueries) GetUsers() (*[]models.User, error) {
	ret := _m.Called()

	var r0 *[]models.User
	if rf, ok := ret.Get(0).(func() *[]models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIUserQueries interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserQueries creates a new instance of IUserQueries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserQueries(t mockConstructorTestingTNewIUserQueries) *IUserQueries {
	mock := &IUserQueries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
